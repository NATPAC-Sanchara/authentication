// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  username     String    @unique
  password     String
  otp          String?
  otpExpiresAt DateTime?
  isVerified   Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  trips             Trip[]
  permissionLogs    PermissionLog[]
  companionContacts CompanionContact[]
  sosEvents         SOSEvent[]

  @@map("users")
}

model Admin {
  id         String    @id @default(cuid())
  email      String    @unique
  password   String
  isVerified Boolean   @default(true)
  role       AdminRole @default(ADMIN)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("admins")
}

enum AdminRole {
  ADMIN
  SUPER_ADMIN
}

model Trip {
  id                   String      @id @default(cuid())
  userid               String
  user                 User        @relation(fields: [userid], references: [id])
  deviceId             String?
  startedAt            DateTime    @default(now())
  endedAt              DateTime?
  startLat             Float?
  startLng             Float?
  endLat               Float?
  endLng               Float?
  modes                String[]
  companions           Json?
  destLat              Float?
  destLng              Float?
  destAddressEncrypted String?
  metadata             Json?
  distanceMeters       Int?
  durationSeconds      Int?
  distanceByMode       Json?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  points               TripPoint[]
  events               TripEvent[]

  @@index([userid])
  @@map("trips")
}

model TripPoint {
  id        String   @id @default(cuid())
  tripId    String
  trip      Trip     @relation(fields: [tripId], references: [id])
  timestamp DateTime @default(now())
  lat       Float
  lng       Float
  speed     Float?
  accuracy  Float?
  heading   Float?
  mode      String?
  clientId  String?
  createdAt DateTime @default(now())

  @@unique([tripId, clientId])
  @@index([tripId])
  @@map("trip_points")
}

model TripEvent {
  id        String   @id @default(cuid())
  tripId    String
  trip      Trip     @relation(fields: [tripId], references: [id])
  type      String
  data      Json?
  createdAt DateTime @default(now())

  @@index([tripId])
  @@map("trip_events")
}

model PermissionLog {
  id         String   @id @default(cuid())
  userid     String?
  user       User?    @relation(fields: [userid], references: [id])
  deviceId   String?
  permission String
  status     String
  error      String?
  createdAt  DateTime @default(now())

  @@index([userid])
  @@index([deviceId])
  @@map("permission_logs")
}

model CompanionContact {
  id        String   @id @default(cuid())
  userid    String
  user      User     @relation(fields: [userid], references: [id])
  name      String
  email     String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userid])
  @@map("companion_contacts")
}

model SOSEvent {
  id          String   @id @default(cuid())
  userid      String
  user        User     @relation(fields: [userid], references: [id])
  triggeredAt DateTime @default(now())
  lat         Float?
  lng         Float?
  handled     Boolean  @default(false)

  @@index([userid])
  @@index([triggeredAt])
  @@map("sos_events")
}
